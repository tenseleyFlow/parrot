#!/bin/bash
# Parrot post-installation setup script
# This script provides guided setup for backend configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
PARROT_BIN="/usr/bin/parrot"
CONFIG_DIR="$HOME/.config/parrot"
CONFIG_FILE="$CONFIG_DIR/parrot.toml"
EXAMPLE_CONFIG="/etc/parrot/parrot.toml.example"

# Helper functions
print_header() {
    echo -e "${BLUE}ðŸ¦œ Parrot Setup Assistant${NC}"
    echo -e "${BLUE}=========================${NC}"
    echo
}

print_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

check_command() {
    command -v "$1" >/dev/null 2>&1
}

detect_backends() {
    local backends=()
    
    # Check for Ollama
    if check_command ollama && ollama list >/dev/null 2>&1; then
        backends+=("local")
        print_success "Ollama detected and running"
    else
        print_warning "Ollama not found or not running"
    fi
    
    # Check for API key environment variable
    if [[ -n "${PARROT_API_KEY:-}" ]] || [[ -n "${OPENAI_API_KEY:-}" ]]; then
        backends+=("api")
        print_success "API key detected in environment"
    else
        print_warning "No API keys found in environment"
    fi
    
    # Fallback is always available
    backends+=("fallback")
    print_success "Fallback backend available"
    
    echo "${backends[@]}"
}

setup_config_dir() {
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
        print_success "Created configuration directory: $CONFIG_DIR"
    fi
}

create_basic_config() {
    local backend_priority="$1"
    local personality="${2:-sarcastic}"
    
    cat > "$CONFIG_FILE" << EOF
# Parrot Configuration
# Generated by post-install setup

backend_priority = ["$backend_priority"]
personality = "$personality"
colors = true

[shell]
enabled = true

[advanced]
debug = false
cache_enabled = true
EOF
    
    print_success "Created basic configuration: $CONFIG_FILE"
}

setup_ollama() {
    print_info "Setting up Ollama backend..."
    
    if ! check_command ollama; then
        print_error "Ollama is not installed"
        echo "To install Ollama:"
        echo "  curl -fsSL https://ollama.com/install.sh | sh"
        echo
        return 1
    fi
    
    if ! ollama list >/dev/null 2>&1; then
        print_warning "Ollama service is not running"
        echo "To start Ollama:"
        echo "  systemctl --user enable ollama"
        echo "  systemctl --user start ollama"
        echo
        return 1
    fi
    
    # Check if phi3.5 model is available
    if ! ollama list | grep -q "phi3.5:3.8b"; then
        print_info "Downloading phi3.5:3.8b model (this may take a few minutes)..."
        if ollama pull phi3.5:3.8b; then
            print_success "Downloaded phi3.5:3.8b model"
        else
            print_error "Failed to download model"
            return 1
        fi
    else
        print_success "phi3.5:3.8b model already available"
    fi
    
    return 0
}

setup_api_backend() {
    print_info "Setting up API backend..."
    
    if [[ -n "${PARROT_API_KEY:-}" ]]; then
        print_success "Using PARROT_API_KEY from environment"
        return 0
    elif [[ -n "${OPENAI_API_KEY:-}" ]]; then
        print_success "Using OPENAI_API_KEY from environment"
        return 0
    else
        print_warning "No API key found in environment"
        echo "To use API backend, set one of:"
        echo "  export PARROT_API_KEY='your-api-key'"
        echo "  export OPENAI_API_KEY='your-api-key'"
        echo
        echo "Or configure it in: $CONFIG_FILE"
        return 1
    fi
}

setup_shell_integration() {
    print_info "Shell integration will be configured when you run 'parrot setup'"
    print_info "This enables automatic command failure detection"
}

interactive_setup() {
    print_header
    
    echo "Welcome to Parrot! Let's set up your intelligent CLI assistant."
    echo
    
    # Detect available backends
    print_info "Detecting available backends..."
    local available_backends
    available_backends=($(detect_backends))
    echo
    
    # Choose personality
    echo "Choose your parrot's personality:"
    echo "  1) mild     - Gentle and helpful"
    echo "  2) sarcastic - Witty with attitude (recommended)"
    echo "  3) savage   - Brutally honest"
    echo
    read -p "Select personality [1-3, default: 2]: " personality_choice
    
    local personality="sarcastic"
    case ${personality_choice:-2} in
        1) personality="mild" ;;
        2) personality="sarcastic" ;;
        3) personality="savage" ;;
        *) personality="sarcastic" ;;
    esac
    
    # Choose backend
    echo
    echo "Choose your preferred backend:"
    local backend_options=()
    local backend_descriptions=()
    
    if [[ " ${available_backends[@]} " =~ " local " ]]; then
        backend_options+=("local")
        backend_descriptions+=("Local AI (Ollama) - Private and fast")
    fi
    
    if [[ " ${available_backends[@]} " =~ " api " ]]; then
        backend_options+=("api")
        backend_descriptions+=("API Backend - Requires API key, highest quality")
    fi
    
    backend_options+=("fallback")
    backend_descriptions+=("Fallback - Built-in responses, no setup required")
    
    for i in "${!backend_options[@]}"; do
        echo "  $((i+1))) ${backend_descriptions[i]}"
    done
    
    echo
    read -p "Select backend [1-${#backend_options[@]}, default: 1]: " backend_choice
    
    local selected_backend="${backend_options[$((${backend_choice:-1}-1))]}"
    
    # Set up configuration
    setup_config_dir
    create_basic_config "$selected_backend" "$personality"
    
    # Backend-specific setup
    case "$selected_backend" in
        "local")
            if ! setup_ollama; then
                print_warning "Ollama setup incomplete, falling back to basic responses"
                create_basic_config "fallback" "$personality"
            fi
            ;;
        "api")
            if ! setup_api_backend; then
                print_warning "API setup incomplete, you'll need to configure it manually"
            fi
            ;;
        "fallback")
            print_success "Fallback backend configured - no additional setup required"
            ;;
    esac
    
    # Shell integration
    echo
    setup_shell_integration
    
    echo
    print_success "Parrot setup complete!"
    echo
    echo "Next steps:"
    echo "  1. Run 'parrot setup' to enable shell integration"
    echo "  2. Try 'parrot mock \"git push\" 1' to test it out"
    echo "  3. Run 'parrot configure' to adjust settings"
    echo
    echo "For help: parrot --help"
    print_info "Configuration file: $CONFIG_FILE"
}

# Main execution
main() {
    # Check if running interactively
    if [[ -t 0 && -t 1 ]]; then
        # Interactive mode
        interactive_setup
    else
        # Non-interactive mode (RPM post-install)
        print_header
        echo "Parrot has been installed successfully!"
        echo
        echo "To complete setup, run:"
        echo "  parrot setup"
        echo
        echo "This will guide you through backend configuration and shell integration."
        echo
        print_info "For manual configuration, see: $EXAMPLE_CONFIG"
    fi
}

# Run main function
main "$@"